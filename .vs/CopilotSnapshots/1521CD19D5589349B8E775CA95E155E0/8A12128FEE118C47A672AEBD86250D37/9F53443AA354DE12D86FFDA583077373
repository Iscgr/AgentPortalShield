# MarFaNet Financial Management System

## Overview

MarFaNet is a comprehensive financial management system designed for managing invoices, representatives, payments, and financial operations in a Persian business context. The system features a modern full-stack architecture with session-based authentication, real-time financial calculations, and AI-powered analytics. It serves as both an administrative panel for internal users (admin and CRM staff) and a public portal for representatives to view their financial status.

## User Preferences

Preferred communication style: Simple, everyday language.

## System Architecture

### Frontend Architecture
The client-side application is built with **React 18 + TypeScript + Vite** using a component-based architecture. The UI leverages **Shadcn/UI components** with **Tailwind CSS** for responsive, mobile-optimized design. State management is handled through **TanStack React Query** for server state synchronization and React Context for authentication state.

**Key Design Decisions:**
- **Component Structure**: Organized into reusable UI components, layout components (header, sidebar), and page-specific components
- **Styling Approach**: Utilizes CSS custom properties for a "claymorphism" design theme with soft pastel colors and Persian RTL support
- **Mobile Optimization**: Implements responsive design patterns with mobile-first considerations and touch-friendly interfaces
- **Authentication Context**: Unified authentication system supporting both admin and CRM user roles with session persistence

### Backend Architecture
The server uses **Node.js + Express** with TypeScript, implementing a RESTful API design pattern. The architecture follows a service-layer pattern with clear separation of concerns.

**Core Components:**
- **Router System**: Modular route registration with middleware-based authentication
- **Service Layer**: Business logic encapsulated in dedicated services (financial engine, telegram integration, AI services)
- **Storage Layer**: Data access abstraction using Drizzle ORM with query optimization
- **Middleware Stack**: Performance monitoring, unified authentication, and security headers

### Database Design
Uses **PostgreSQL** with **Drizzle ORM** for type-safe database operations. The schema implements a normalized structure for financial data management.

**Key Tables:**
- **Representatives**: Core entity storing dealer/shop information with financial summaries
- **Invoices**: Transaction records with batch processing support
- **Payments**: Payment tracking with allocation management
- **Invoice Batches**: Grouped invoice processing for bulk operations
- **Activity Logs**: Audit trail for all system operations

### Authentication & Authorization
Implements **session-based authentication** using express-session with PostgreSQL session storage. The system supports multiple user types with role-based access control.

**Security Features:**
- Password hashing with bcryptjs
- Session timeout and management
- CORS configuration for cross-origin requests
- Security headers for XSS and CSRF protection
- Public portal isolation for representative access

### Financial Processing Engine
A unified financial calculation system that ensures data consistency across all operations.

**Key Capabilities:**
- Real-time debt and payment calculations
- FIFO payment allocation algorithms
- Financial integrity validation and reconciliation
- Batch processing for bulk invoice operations
- Performance monitoring with slow query detection

## External Dependencies

### Database Infrastructure
- **PostgreSQL**: Primary database using Neon serverless platform (@neondatabase/serverless)
- **Drizzle ORM**: Type-safe database operations with migration support
- **Connection Pooling**: Optimized for serverless environments with retry logic

### UI Framework & Styling
- **Radix UI**: Accessible component primitives (@radix-ui/react-*)
- **Tailwind CSS**: Utility-first CSS framework with custom design system
- **Shadcn/UI**: Pre-built component library with Persian RTL support
- **Class Variance Authority**: Type-safe component variants

### Development & Build Tools
- **Vite**: Fast build tool with HMR for development
- **TypeScript**: Static type checking across the entire codebase
- **ESBuild**: Production bundling for server-side code
- **PostCSS**: CSS processing with Tailwind integration

### Third-Party Integrations
- **Google Gemini AI**: Financial analysis and AI-powered insights (@google/genai)
- **Telegram Bot API**: Representative communication and notifications
- **Session Management**: PostgreSQL-backed session storage (connect-pg-simple)
- **File Upload**: Multer for JSON data processing and file handling

### Utilities & Validation
- **Zod**: Runtime type validation and schema parsing
- **Nanoid**: Unique ID generation for entities
- **React Hook Form**: Form state management with validation (@hookform/resolvers)
- **Date/Time**: Persian calendar support with custom utilities

### Development Environment
- **Replit Integration**: Deployment platform with development tooling
- **Hot Module Replacement**: Real-time development updates
- **Source Maps**: Debugging support in production builds
- **Performance Monitoring**: Request timing and memory usage tracking