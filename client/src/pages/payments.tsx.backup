/**
 * SHERLOCK v34.1: COMPREHENSIVE PAYMENT ALLOCATION MANAGEMENT
 * ATOMOS COMPLIANT - Complete payment allocation interface with manual and auto features
 */

import React, { useState, useEffect } from 'react';
import axios from '../lib/axios';
import { Button } from '../components/ui/button';
import { Input } from '../components/ui/input';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '../components/ui/card';
import { Badge } from '../components/ui/badge';
import { Alert, AlertDescription } from '../components/ui/alert';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '../components/ui/tabs';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '../components/ui/select';
import { Textarea } from '../components/ui/textarea';
import { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle, DialogTrigger } from '../components/ui/dialog';
import { Label } from '../components/ui/label';
import { Separator } from '../components/ui/separator';
import { CheckCircle, XCircle, Clock, AlertTriangle, Zap, Target, DollarSign } from 'lucide-react';

interface Payment {
  id: number;
  representativeId: number;
  invoiceId?: number;
  amount: string;
  paymentDate: string;
  description?: string;
  isAllocated: boolean;
  createdAt: string;
}

interface Invoice {
  id: number;
  invoiceNumber: string;
  representativeId: number;
  amount: string;
  issueDate: string;
  dueDate?: string;
  status: string;
  createdAt: string;
}

interface Representative {
  id: number;
  name: string;
  code: string;
  totalDebt: string;
}

interface AllocationResult {
  success: boolean;
  allocatedAmount: number;
  remainingAmount: number;
  allocations: any[];
  errors: string[];
  warnings: string[];
  transactionId: string;
  processingTime: number;
}

const PaymentManagement: React.FC = () => {
  const [payments, setPayments] = useState<Payment[]>([]);
  const [unallocatedPayments, setUnallocatedPayments] = useState<Payment[]>([]);
  const [representatives, setRepresentatives] = useState<Representative[]>([]);
  const [invoices, setInvoices] = useState<Invoice[]>([]);
  const [loading, setLoading] = useState(false);
  const [selectedRepresentative, setSelectedRepresentative] = useState<number | null>(null);
  const [autoAllocationResults, setAutoAllocationResults] = useState<any>(null);
  const [manualAllocationDialog, setManualAllocationDialog] = useState(false);
  const [selectedPayment, setSelectedPayment] = useState<Payment | null>(null);

  // Manual allocation form states
  const [manualForm, setManualForm] = useState({
    paymentId: '',
    invoiceId: '',
    amount: '',
    reason: ''
  });

  useEffect(() => {
    loadInitialData();
  }, []);

  useEffect(() => {
    if (selectedRepresentative) {
      loadRepresentativeData(selectedRepresentative);
    }
  }, [selectedRepresentative]);

  const loadInitialData = async () => {
    setLoading(true);
    try {
      const [paymentsRes, repsRes] = await Promise.all([
        axios.get('/api/payments'),
        axios.get('/api/representatives')
      ]);

      setPayments(paymentsRes.data.data || []);
      setRepresentatives(repsRes.data.data || []);

    } catch (error) {
      console.error('❌ خطا در بارگذاری داده‌های اولیه:', error);
    }
    setLoading(false);
  };

  const loadRepresentativeData = async (representativeId: number) => {
    try {
      const [unallocatedRes, invoicesRes] = await Promise.all([
        axios.get(`/api/payments/unallocated/${representativeId}`),
        axios.get(`/api/invoices/representative/${representativeId}`)
      ]);

      setUnallocatedPayments(unallocatedRes.data.data || []);
      setInvoices(invoicesRes.data.invoices || []);

    } catch (error) {
      console.error('❌ خطا در بارگذاری داده‌های نماینده:', error);
    }
  };

  const handleAutoAllocation = async () => {
    if (!selectedRepresentative) {
      alert('لطفاً ابتدا یک نماینده انتخاب کنید');
      return;
    }

    setLoading(true);
    try {
      console.log(`🚀 SHERLOCK v34.1: Starting auto-allocation for representative ${selectedRepresentative}`);

      const response = await axios.post(`/api/payments/auto-allocate/${selectedRepresentative}`, {
        rules: {
          method: 'FIFO',
          allowPartialAllocation: true,
          allowOverAllocation: false,
          priorityInvoiceStatuses: ['overdue', 'unpaid', 'partial'],
          strictValidation: true,
          auditMode: true
        }
      });

      if (response.data.success) {
        setAutoAllocationResults(response.data);
        console.log(`✅ Auto-allocation completed:`, response.data.summary);

        // Reload data
        await loadRepresentativeData(selectedRepresentative);
        await loadInitialData();

      } else {
        console.error('❌ Auto-allocation failed:', response.data);
        alert('خطا در تخصیص خودکار: ' + (response.data.error || 'خطای نامشخص'));
      }
    } catch (error) {
      console.error('❌ Auto-allocation error:', error);
      alert('خطا در تخصیص خودکار');
    }
    setLoading(false);
  };

  const handleManualAllocation = async () => {
    if (!manualForm.paymentId || !manualForm.invoiceId || !manualForm.amount) {
      alert('لطفاً تمام فیلدهای لازم را پر کنید');
      return;
    }

    setLoading(true);
    try {
      console.log(`🎯 SHERLOCK v34.1: Manual allocation:`, manualForm);

      const response = await axios.post('/api/payments/manual-allocate', {
        paymentId: parseInt(manualForm.paymentId),
        invoiceId: parseInt(manualForm.invoiceId),
        amount: parseFloat(manualForm.amount),
        reason: manualForm.reason || 'تخصیص دستی'
      });

      if (response.data.success) {
        console.log(`✅ Manual allocation successful:`, response.data.data);
        alert('تخصیص دستی با موفقیت انجام شد');

        // Reset form and close dialog
        setManualForm({ paymentId: '', invoiceId: '', amount: '', reason: '' });
        setManualAllocationDialog(false);
        setSelectedPayment(null);

        // Reload data
        if (selectedRepresentative) {
          await loadRepresentativeData(selectedRepresentative);
        }
        await loadInitialData();

      } else {
        console.error('❌ Manual allocation failed:', response.data);
        alert('خطا در تخصیص دستی: ' + (response.data.error || 'خطای نامشخص'));
      }
    } catch (error) {
      console.error('❌ Manual allocation error:', error);
      alert('خطا در تخصیص دستی');
    }
    setLoading(false);
  };

  const openManualAllocationDialog = (payment: Payment) => {
    setSelectedPayment(payment);
    setManualForm({
      paymentId: payment.id.toString(),
      invoiceId: '',
      amount: payment.amount,
      reason: ''
    });
    setManualAllocationDialog(true);
  };

  const getStatusBadge = (isAllocated: boolean) => {
    return isAllocated ? (
      <Badge variant="default" className="bg-green-500">
        <CheckCircle className="w-4 h-4 mr-1" />
        تخصیص یافته
      </Badge>
    ) : (
      <Badge variant="secondary">
        <Clock className="w-4 h-4 mr-1" />
        تخصیص نیافته
      </Badge>
    );
  };

  const formatCurrency = (amount: string | number) => {
    return new Intl.NumberFormat('fa-IR').format(Number(amount)) + ' تومان';
  };

  const formatDate = (dateString: string) => {
    return new Date(dateString).toLocaleDateString('fa-IR');
  };

  if (loading && payments.length === 0) {
    return (
      <div className="flex justify-center items-center h-64">
        <div className="text-lg">در حال بارگذاری...</div>
      </div>
    );
  }

  return (
    <div className="space-y-6" dir="rtl">
      {/* Header */}
      <div className="flex justify-between items-center">
        <h1 className="text-3xl font-bold text-gray-900">
          🎯 مدیریت تخصیص پرداخت‌ها
        </h1>
        <div className="text-sm text-gray-500">
          SHERLOCK v34.1 - ATOMOS Protocol
        </div>
      </div>

      {/* Representative Selection */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center">
            <Target className="w-5 h-5 mr-2" />
            انتخاب نماینده
          </CardTitle>
          <CardDescription>
            برای شروع فرآیند تخصیص، ابتدا نماینده مورد نظر را انتخاب کنید
          </CardDescription>
        </CardHeader>
        <CardContent>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4 items-end">
            <div>
              <Label htmlFor="representative-select">نماینده</Label>
              <Select 
                value={selectedRepresentative?.toString() || ''} 
                onValueChange={(value) => setSelectedRepresentative(parseInt(value))}
              >
                <SelectTrigger>
                  <SelectValue placeholder="نماینده را انتخاب کنید..." />
                </SelectTrigger>
                <SelectContent>
                  {representatives.map(rep => (
                    <SelectItem key={rep.id} value={rep.id.toString()}>
                      {rep.name} ({rep.code}) - بدهی: {formatCurrency(rep.totalDebt)}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>
            <div>
              <Button 
                onClick={handleAutoAllocation} 
                disabled={!selectedRepresentative || loading}
                className="w-full"
                size="lg"
              >
                <Zap className="w-4 h-4 mr-2" />
                تخصیص خودکار (FIFO)
              </Button>
            </div>
          </div>
        </CardContent>
      </Card>

      {/* Auto-allocation Results */}
      {autoAllocationResults && (
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center">
              {autoAllocationResults.success ? (
                <CheckCircle className="w-5 h-5 mr-2 text-green-500" />
              ) : (
                <XCircle className="w-5 h-5 mr-2 text-red-500" />
              )}
              نتایج تخصیص خودکار
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="grid grid-cols-1 md:grid-cols-4 gap-4 mb-4">
              <div className="text-center">
                <div className="text-2xl font-bold text-blue-600">
                  {autoAllocationResults.summary?.totalProcessed || 0}
                </div>
                <div className="text-sm text-gray-500">پرداخت پردازش شده</div>
              </div>
              <div className="text-center">
                <div className="text-2xl font-bold text-green-600">
                  {formatCurrency(autoAllocationResults.summary?.totalAllocated || 0)}
                </div>
                <div className="text-sm text-gray-500">مبلغ تخصیص یافته</div>
              </div>
              <div className="text-center">
                <div className="text-2xl font-bold text-red-600">
                  {autoAllocationResults.summary?.totalErrors || 0}
                </div>
                <div className="text-sm text-gray-500">خطا</div>
              </div>
              <div className="text-center">
                <div className="text-2xl font-bold text-purple-600">
                  {Math.round(autoAllocationResults.summary?.processingTime || 0)}ms
                </div>
                <div className="text-sm text-gray-500">زمان پردازش</div>
              </div>
            </div>

            {autoAllocationResults.results && autoAllocationResults.results.length > 0 && (
              <div>
                <h4 className="font-medium mb-2">جزئیات تخصیص:</h4>
                <div className="space-y-2 max-h-64 overflow-y-auto">
                  {autoAllocationResults.results.map((result: any, index: number) => (
                    <div key={index} className="flex justify-between items-center p-2 bg-gray-50 rounded">
                      <span>پرداخت {result.paymentId}</span>
                      {result.success ? (
                        <div className="text-green-600">
                          ✅ {formatCurrency(result.allocatedAmount)} تخصیص یافت
                        </div>
                      ) : (
                        <div className="text-red-600">
                          ❌ {result.errors?.[0] || 'خطا در تخصیص'}
                        </div>
                      )}
                    </div>
                  ))}
                </div>
              </div>
            )}
          </CardContent>
        </Card>
      )}

      <Tabs defaultValue="unallocated" className="w-full">
        <TabsList className="grid w-full grid-cols-3">
          <TabsTrigger value="unallocated">پرداخت‌های تخصیص نیافته</TabsTrigger>
          <TabsTrigger value="allocated">پرداخت‌های تخصیص یافته</TabsTrigger>
          <TabsTrigger value="invoices">فاکتورهای قابل تخصیص</TabsTrigger>
        </TabsList>

        <TabsContent value="unallocated" className="space-y-4">
          <Card>
            <CardHeader>
              <CardTitle>پرداخت‌های تخصیص نیافته</CardTitle>
              <CardDescription>
                {selectedRepresentative 
                  ? `${unallocatedPayments.length} پرداخت تخصیص نیافته برای نماینده انتخاب شده`
                  : 'لطفاً ابتدا یک نماینده انتخاب کنید'
                }
              </CardDescription>
            </CardHeader>
            <CardContent>
              {selectedRepresentative ? (
                <div className="space-y-4">
                  {unallocatedPayments.length > 0 ? (
                    unallocatedPayments.map(payment => (
                      <div key={payment.id} className="flex justify-between items-center p-4 border rounded-lg">
                        <div>
                          <div className="font-medium">پرداخت #{payment.id}</div>
                          <div className="text-sm text-gray-500">
                            {formatDate(payment.paymentDate)} - {payment.description || 'بدون توضیح'}
                          </div>
                        </div>
                        <div className="flex items-center space-x-2 space-x-reverse">
                          <div className="text-lg font-bold text-blue-600">
                            {formatCurrency(payment.amount)}
                          </div>
                          {getStatusBadge(payment.isAllocated)}
                          <Button 
                            onClick={() => openManualAllocationDialog(payment)}
                            variant="outline"
                            size="sm"
                          >
                            تخصیص دستی
                          </Button>
                        </div>
                      </div>
                    ))
                  ) : (
                    <div className="text-center py-8 text-gray-500">
                      هیچ پرداخت تخصیص نیافته‌ای برای این نماینده وجود ندارد
                    </div>
                  )}
                </div>
              ) : (
                <div className="text-center py-8 text-gray-500">
                  لطفاً ابتدا یک نماینده انتخاب کنید
                </div>
              )}
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="allocated" className="space-y-4">
          <Card>
            <CardHeader>
              <CardTitle>پرداخت‌های تخصیص یافته</CardTitle>
              <CardDescription>
                تاریخچه پرداخت‌هایی که تخصیص یافته‌اند
              </CardDescription>
            </CardHeader>
            <CardContent>
              <div className="space-y-4">
                {payments.filter(p => p.isAllocated && (!selectedRepresentative || p.representativeId === selectedRepresentative)).map(payment => (
                  <div key={payment.id} className="flex justify-between items-center p-4 border rounded-lg bg-green-50">
                    <div>
                      <div className="font-medium">پرداخت #{payment.id}</div>
                      <div className="text-sm text-gray-500">
                        {formatDate(payment.paymentDate)} - {payment.description || 'بدون توضیح'}
                      </div>
                      {payment.invoiceId && (
                        <div className="text-sm text-green-600">
                          تخصیص یافته به فاکتور #{payment.invoiceId}
                        </div>
                      )}
                    </div>
                    <div className="flex items-center space-x-2 space-x-reverse">
                      <div className="text-lg font-bold text-green-600">
                        {formatCurrency(payment.amount)}
                      </div>
                      {getStatusBadge(payment.isAllocated)}
                    </div>
                  </div>
                ))}
              </div>
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="invoices" className="space-y-4">
          <Card>
            <CardHeader>
              <CardTitle>فاکتورهای قابل تخصیص</CardTitle>
              <CardDescription>
                فاکتورهایی که می‌توانند پرداخت دریافت کنند
              </CardDescription>
            </CardHeader>
            <CardContent>
              {selectedRepresentative ? (
                <div className="space-y-4">
                  {invoices.filter(inv => ['unpaid', 'partial', 'overdue'].includes(inv.status)).map(invoice => (
                    <div key={invoice.id} className="flex justify-between items-center p-4 border rounded-lg">
                      <div>
                        <div className="font-medium">فاکتور {invoice.invoiceNumber}</div>
                        <div className="text-sm text-gray-500">
                          صادره: {formatDate(invoice.issueDate)}
                          {invoice.dueDate && ` - سررسید: ${formatDate(invoice.dueDate)}`}
                        </div>
                      </div>
                      <div className="flex items-center space-x-2 space-x-reverse">
                        <div className="text-lg font-bold">
                          {formatCurrency(invoice.amount)}
                        </div>
                        <Badge 
                          variant={
                            invoice.status === 'overdue' ? 'destructive' : 
                            invoice.status === 'partial' ? 'secondary' : 'default'
                          }
                        >
                          {invoice.status === 'unpaid' && 'پرداخت نشده'}
                          {invoice.status === 'partial' && 'پرداخت جزئی'}
                          {invoice.status === 'overdue' && 'معوق'}
                        </Badge>
                      </div>
                    </div>
                  ))}
                </div>
              ) : (
                <div className="text-center py-8 text-gray-500">
                  لطفاً ابتدا یک نماینده انتخاب کنید
                </div>
              )}
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>

      {/* Manual Allocation Dialog */}
      <Dialog open={manualAllocationDialog} onOpenChange={setManualAllocationDialog}>
        <DialogContent className="max-w-md" dir="rtl">
          <DialogHeader>
            <DialogTitle>تخصیص دستی پرداخت</DialogTitle>
            <DialogDescription>
              پرداخت #{selectedPayment?.id} - مبلغ: {selectedPayment && formatCurrency(selectedPayment.amount)}
            </DialogDescription>
          </DialogHeader>

          <div className="space-y-4">
            <div>
              <Label htmlFor="invoice-select">فاکتور مقصد</Label>
              <Select 
                value={manualForm.invoiceId} 
                onValueChange={(value) => setManualForm(prev => ({...prev, invoiceId: value}))}
              >
                <SelectTrigger>
                  <SelectValue placeholder="فاکتور را انتخاب کنید..." />
                </SelectTrigger>
                <SelectContent>
                  {invoices.filter(inv => ['unpaid', 'partial', 'overdue'].includes(inv.status)).map(invoice => (
                    <SelectItem key={invoice.id} value={invoice.id.toString()}>
                      {invoice.invoiceNumber} - {formatCurrency(invoice.amount)} ({invoice.status})
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>

            <div>
              <Label htmlFor="amount-input">مبلغ تخصیص</Label>
              <Input
                id="amount-input"
                type="number"
                value={manualForm.amount}
                onChange={(e) => setManualForm(prev => ({...prev, amount: e.target.value}))}
                placeholder="مبلغ تخصیص را وارد کنید"
              />
            </div>

            <div>
              <Label htmlFor="reason-input">دلیل تخصیص (اختیاری)</Label>
              <Textarea
                id="reason-input"
                value={manualForm.reason}
                onChange={(e) => setManualForm(prev => ({...prev, reason: e.target.value}))}
                placeholder="دلیل این تخصیص دستی را بنویسید..."
                rows={3}
              />
            </div>
          </div>

          <DialogFooter>
            <Button variant="outline" onClick={() => setManualAllocationDialog(false)}>
              انصراف
            </Button>
            <Button onClick={handleManualAllocation} disabled={loading}>
              {loading ? 'در حال تخصیص...' : 'تخصیص دستی'}
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>
    </div>
  );
};

export default PaymentManagement;